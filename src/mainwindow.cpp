#include "qthread.h"
#include "qmenubar.h"
#include "qstandardpaths.h"
#include "qfiledialog.h"
#include "qmessagebox.h"
#include "ui_mainwindow.h"
#include "changewatcher.h"
#include "mainwindow.h"

// these indices have the same numerical values as the scarlett's native enums
const char *mixerEnumValues[] = {"Off", "PCM 1", "PCM 2", "PCM 3", "PCM 4", "PCM 5", "PCM 6", "PCM 7", "PCM 8", "PCM 9", "PCM 10", "PCM 11", "PCM 12",
                              "Analog 1", "Analog 2", "Analog 3", "Analog 4", "SPDIF 1", "SPDIF 2", "Mix A", "Mix B", "Mix C", "Mix D", "Mix E", "Mix F", "Mix G", "Mix H"};

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow){
    // run QT setup
    ui->setupUi(this);

    // add enum values to combo menus
    for(int i=0; i<27; ++i){
        ui->combo_out_src_1->addItem(mixerEnumValues[i]);
        ui->combo_out_src_2->addItem(mixerEnumValues[i]);
        ui->combo_out_src_3->addItem(mixerEnumValues[i]);
        ui->combo_out_src_4->addItem(mixerEnumValues[i]);
        ui->combo_out_src_5->addItem(mixerEnumValues[i]);
        ui->combo_out_src_6->addItem(mixerEnumValues[i]);
        ui->combo_in_src_1->addItem(mixerEnumValues[i]);
        ui->combo_in_src_2->addItem(mixerEnumValues[i]);
        ui->combo_in_src_3->addItem(mixerEnumValues[i]);
        ui->combo_in_src_4->addItem(mixerEnumValues[i]);
        ui->combo_in_src_5->addItem(mixerEnumValues[i]);
        ui->combo_in_src_6->addItem(mixerEnumValues[i]);
    }
    // combo matrices only have items "Off" through "SPDIF 2"
    for(int i=0; i<19; ++i){
        ui->combo_matrix_in_1->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_2->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_3->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_4->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_5->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_6->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_7->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_8->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_9->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_10->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_11->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_12->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_13->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_14->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_15->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_16->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_17->addItem(mixerEnumValues[i]);
        ui->combo_matrix_in_18->addItem(mixerEnumValues[i]);
    }


    // link all the widgets from designer window to MixSisCtrl struct refs
    // TODO: UI should ideally be generated by hand in C++, not w/ auto-generated qtcreator design script
    mixerCtrl.vol_master[0] = ui->slider_master_L;
    mixerCtrl.vol_master[1] = ui->slider_master_R;
    mixerCtrl.vol_master_mute = ui->check_master_mute_1;
    mixerCtrl.vol_master_link = ui->check_master_link_12;
    mixerCtrl.vol_out[0] = ui->slider_output_1;
    mixerCtrl.vol_out[1] = ui->slider_output_2;
    mixerCtrl.vol_out[2] = ui->slider_output_3;
    mixerCtrl.vol_out[3] = ui->slider_output_4;
    mixerCtrl.vol_out[4] = ui->slider_output_5;
    mixerCtrl.vol_out[5] = ui->slider_output_6;
    mixerCtrl.vol_out_mute[0] = ui->check_out_mute_1;
    mixerCtrl.vol_out_mute[1] = ui->check_out_mute_2;
    mixerCtrl.vol_out_mute[2] = ui->check_out_mute_3;
    mixerCtrl.vol_out_mute[3] = ui->check_out_mute_4;
    mixerCtrl.vol_out_mute[4] = ui->check_out_mute_5;
    mixerCtrl.vol_out_mute[5] = ui->check_out_mute_6;
    mixerCtrl.vol_out_link[0] = ui->check_out_link_12;
    mixerCtrl.vol_out_link[1] = ui->check_out_link_34;
    mixerCtrl.vol_out_link[2] = ui->check_out_link_56;
    mixerCtrl.out_src[0] = ui->combo_out_src_1;
    mixerCtrl.out_src[1] = ui->combo_out_src_2;
    mixerCtrl.out_src[2] = ui->combo_out_src_3;
    mixerCtrl.out_src[3] = ui->combo_out_src_4;
    mixerCtrl.out_src[4] = ui->combo_out_src_5;
    mixerCtrl.out_src[5] = ui->combo_out_src_6;
    mixerCtrl.in_src[0]  = ui->combo_in_src_1;
    mixerCtrl.in_src[1]  = ui->combo_in_src_2;
    mixerCtrl.in_src[2]  = ui->combo_in_src_3;
    mixerCtrl.in_src[3]  = ui->combo_in_src_4;
    mixerCtrl.in_src[4]  = ui->combo_in_src_5;
    mixerCtrl.in_src[5]  = ui->combo_in_src_6;
    mixerCtrl.in_imp[0] = ui->rad_imp_line_1;
    mixerCtrl.in_imp[1] = ui->rad_imp_hiz_1;
    mixerCtrl.in_imp[2] = ui->rad_imp_line_2;
    mixerCtrl.in_imp[3] = ui->rad_imp_hiz_2;
    mixerCtrl.in_pad[0] = ui->rad_pad_off_1;
    mixerCtrl.in_pad[1] = ui->rad_pad_on_1;
    mixerCtrl.in_pad[2] = ui->rad_pad_off_2;
    mixerCtrl.in_pad[3] = ui->rad_pad_on_2;
    mixerCtrl.in_pad[4] = ui->rad_pad_off_3;
    mixerCtrl.in_pad[5] = ui->rad_pad_on_3;
    mixerCtrl.in_pad[6] = ui->rad_pad_off_4;
    mixerCtrl.in_pad[7] = ui->rad_pad_on_4;

    mixerCtrl.mtx_src[0] = ui->combo_matrix_in_1;
    mixerCtrl.mtx_src[1] = ui->combo_matrix_in_2;
    mixerCtrl.mtx_src[2] = ui->combo_matrix_in_3;
    mixerCtrl.mtx_src[3] = ui->combo_matrix_in_4;
    mixerCtrl.mtx_src[4] = ui->combo_matrix_in_5;
    mixerCtrl.mtx_src[5] = ui->combo_matrix_in_6;
    mixerCtrl.mtx_src[6] = ui->combo_matrix_in_7;
    mixerCtrl.mtx_src[7] = ui->combo_matrix_in_8;
    mixerCtrl.mtx_src[8] = ui->combo_matrix_in_9;
    mixerCtrl.mtx_src[9] = ui->combo_matrix_in_10;
    mixerCtrl.mtx_src[10] = ui->combo_matrix_in_11;
    mixerCtrl.mtx_src[11] = ui->combo_matrix_in_12;
    mixerCtrl.mtx_src[12] = ui->combo_matrix_in_13;
    mixerCtrl.mtx_src[13] = ui->combo_matrix_in_14;
    mixerCtrl.mtx_src[14] = ui->combo_matrix_in_15;
    mixerCtrl.mtx_src[15] = ui->combo_matrix_in_16;
    mixerCtrl.mtx_src[16] = ui->combo_matrix_in_17;
    mixerCtrl.mtx_src[17] = ui->combo_matrix_in_18;

    mixerCtrl.mtx_vol[0][0] = ui->slider_mtx_a_1;
    mixerCtrl.mtx_vol[0][1] = ui->slider_mtx_b_1;
    mixerCtrl.mtx_vol[0][2] = ui->slider_mtx_c_1;
    mixerCtrl.mtx_vol[0][3] = ui->slider_mtx_d_1;
    mixerCtrl.mtx_vol[0][4] = ui->slider_mtx_e_1;
    mixerCtrl.mtx_vol[0][5] = ui->slider_mtx_f_1;
    mixerCtrl.mtx_vol[0][6] = ui->slider_mtx_g_1;
    mixerCtrl.mtx_vol[0][7] = ui->slider_mtx_h_1;

    mixerCtrl.mtx_vol[1][0] = ui->slider_mtx_a_2;
    mixerCtrl.mtx_vol[1][1] = ui->slider_mtx_b_2;
    mixerCtrl.mtx_vol[1][2] = ui->slider_mtx_c_2;
    mixerCtrl.mtx_vol[1][3] = ui->slider_mtx_d_2;
    mixerCtrl.mtx_vol[1][4] = ui->slider_mtx_e_2;
    mixerCtrl.mtx_vol[1][5] = ui->slider_mtx_f_2;
    mixerCtrl.mtx_vol[1][6] = ui->slider_mtx_g_2;
    mixerCtrl.mtx_vol[1][7] = ui->slider_mtx_h_2;

    mixerCtrl.mtx_vol[2][0] = ui->slider_mtx_a_3;
    mixerCtrl.mtx_vol[2][1] = ui->slider_mtx_b_3;
    mixerCtrl.mtx_vol[2][2] = ui->slider_mtx_c_3;
    mixerCtrl.mtx_vol[2][3] = ui->slider_mtx_d_3;
    mixerCtrl.mtx_vol[2][4] = ui->slider_mtx_e_3;
    mixerCtrl.mtx_vol[2][5] = ui->slider_mtx_f_3;
    mixerCtrl.mtx_vol[2][6] = ui->slider_mtx_g_3;
    mixerCtrl.mtx_vol[2][7] = ui->slider_mtx_h_3;

    mixerCtrl.mtx_vol[3][0] = ui->slider_mtx_a_4;
    mixerCtrl.mtx_vol[3][1] = ui->slider_mtx_b_4;
    mixerCtrl.mtx_vol[3][2] = ui->slider_mtx_c_4;
    mixerCtrl.mtx_vol[3][3] = ui->slider_mtx_d_4;
    mixerCtrl.mtx_vol[3][4] = ui->slider_mtx_e_4;
    mixerCtrl.mtx_vol[3][5] = ui->slider_mtx_f_4;
    mixerCtrl.mtx_vol[3][6] = ui->slider_mtx_g_4;
    mixerCtrl.mtx_vol[3][7] = ui->slider_mtx_h_4;

    mixerCtrl.mtx_vol[4][0] = ui->slider_mtx_a_5;
    mixerCtrl.mtx_vol[4][1] = ui->slider_mtx_b_5;
    mixerCtrl.mtx_vol[4][2] = ui->slider_mtx_c_5;
    mixerCtrl.mtx_vol[4][3] = ui->slider_mtx_d_5;
    mixerCtrl.mtx_vol[4][4] = ui->slider_mtx_e_5;
    mixerCtrl.mtx_vol[4][5] = ui->slider_mtx_f_5;
    mixerCtrl.mtx_vol[4][6] = ui->slider_mtx_g_5;
    mixerCtrl.mtx_vol[4][7] = ui->slider_mtx_h_5;

    mixerCtrl.mtx_vol[5][0] = ui->slider_mtx_a_6;
    mixerCtrl.mtx_vol[5][1] = ui->slider_mtx_b_6;
    mixerCtrl.mtx_vol[5][2] = ui->slider_mtx_c_6;
    mixerCtrl.mtx_vol[5][3] = ui->slider_mtx_d_6;
    mixerCtrl.mtx_vol[5][4] = ui->slider_mtx_e_6;
    mixerCtrl.mtx_vol[5][5] = ui->slider_mtx_f_6;
    mixerCtrl.mtx_vol[5][6] = ui->slider_mtx_g_6;
    mixerCtrl.mtx_vol[5][7] = ui->slider_mtx_h_6;


    mixerCtrl.mtx_vol[6][0] = ui->slider_mtx_a_7;
    mixerCtrl.mtx_vol[6][1] = ui->slider_mtx_b_7;
    mixerCtrl.mtx_vol[6][2] = ui->slider_mtx_c_7;
    mixerCtrl.mtx_vol[6][3] = ui->slider_mtx_d_7;
    mixerCtrl.mtx_vol[6][4] = ui->slider_mtx_e_7;
    mixerCtrl.mtx_vol[6][5] = ui->slider_mtx_f_7;
    mixerCtrl.mtx_vol[6][6] = ui->slider_mtx_g_7;
    mixerCtrl.mtx_vol[6][7] = ui->slider_mtx_h_7;

    mixerCtrl.mtx_vol[7][0] = ui->slider_mtx_a_8;
    mixerCtrl.mtx_vol[7][1] = ui->slider_mtx_b_8;
    mixerCtrl.mtx_vol[7][2] = ui->slider_mtx_c_8;
    mixerCtrl.mtx_vol[7][3] = ui->slider_mtx_d_8;
    mixerCtrl.mtx_vol[7][4] = ui->slider_mtx_e_8;
    mixerCtrl.mtx_vol[7][5] = ui->slider_mtx_f_8;
    mixerCtrl.mtx_vol[7][6] = ui->slider_mtx_g_8;
    mixerCtrl.mtx_vol[7][7] = ui->slider_mtx_h_8;

    mixerCtrl.mtx_vol[8][0] = ui->slider_mtx_a_9;
    mixerCtrl.mtx_vol[8][1] = ui->slider_mtx_b_9;
    mixerCtrl.mtx_vol[8][2] = ui->slider_mtx_c_9;
    mixerCtrl.mtx_vol[8][3] = ui->slider_mtx_d_9;
    mixerCtrl.mtx_vol[8][4] = ui->slider_mtx_e_9;
    mixerCtrl.mtx_vol[8][5] = ui->slider_mtx_f_9;
    mixerCtrl.mtx_vol[8][6] = ui->slider_mtx_g_9;
    mixerCtrl.mtx_vol[8][7] = ui->slider_mtx_h_9;

    mixerCtrl.mtx_vol[9][0] = ui->slider_mtx_a_10;
    mixerCtrl.mtx_vol[9][1] = ui->slider_mtx_b_10;
    mixerCtrl.mtx_vol[9][2] = ui->slider_mtx_c_10;
    mixerCtrl.mtx_vol[9][3] = ui->slider_mtx_d_10;
    mixerCtrl.mtx_vol[9][4] = ui->slider_mtx_e_10;
    mixerCtrl.mtx_vol[9][5] = ui->slider_mtx_f_10;
    mixerCtrl.mtx_vol[9][6] = ui->slider_mtx_g_10;
    mixerCtrl.mtx_vol[9][7] = ui->slider_mtx_h_10;

    mixerCtrl.mtx_vol[10][0] = ui->slider_mtx_a_11;
    mixerCtrl.mtx_vol[10][1] = ui->slider_mtx_b_11;
    mixerCtrl.mtx_vol[10][2] = ui->slider_mtx_c_11;
    mixerCtrl.mtx_vol[10][3] = ui->slider_mtx_d_11;
    mixerCtrl.mtx_vol[10][4] = ui->slider_mtx_e_11;
    mixerCtrl.mtx_vol[10][5] = ui->slider_mtx_f_11;
    mixerCtrl.mtx_vol[10][6] = ui->slider_mtx_g_11;
    mixerCtrl.mtx_vol[10][7] = ui->slider_mtx_h_11;

    mixerCtrl.mtx_vol[11][0] = ui->slider_mtx_a_12;
    mixerCtrl.mtx_vol[11][1] = ui->slider_mtx_b_12;
    mixerCtrl.mtx_vol[11][2] = ui->slider_mtx_c_12;
    mixerCtrl.mtx_vol[11][3] = ui->slider_mtx_d_12;
    mixerCtrl.mtx_vol[11][4] = ui->slider_mtx_e_12;
    mixerCtrl.mtx_vol[11][5] = ui->slider_mtx_f_12;
    mixerCtrl.mtx_vol[11][6] = ui->slider_mtx_g_12;
    mixerCtrl.mtx_vol[11][7] = ui->slider_mtx_h_12;


    mixerCtrl.mtx_vol[12][0] = ui->slider_mtx_a_13;
    mixerCtrl.mtx_vol[12][1] = ui->slider_mtx_b_13;
    mixerCtrl.mtx_vol[12][2] = ui->slider_mtx_c_13;
    mixerCtrl.mtx_vol[12][3] = ui->slider_mtx_d_13;
    mixerCtrl.mtx_vol[12][4] = ui->slider_mtx_e_13;
    mixerCtrl.mtx_vol[12][5] = ui->slider_mtx_f_13;
    mixerCtrl.mtx_vol[12][6] = ui->slider_mtx_g_13;
    mixerCtrl.mtx_vol[12][7] = ui->slider_mtx_h_13;

    mixerCtrl.mtx_vol[13][0] = ui->slider_mtx_a_14;
    mixerCtrl.mtx_vol[13][1] = ui->slider_mtx_b_14;
    mixerCtrl.mtx_vol[13][2] = ui->slider_mtx_c_14;
    mixerCtrl.mtx_vol[13][3] = ui->slider_mtx_d_14;
    mixerCtrl.mtx_vol[13][4] = ui->slider_mtx_e_14;
    mixerCtrl.mtx_vol[13][5] = ui->slider_mtx_f_14;
    mixerCtrl.mtx_vol[13][6] = ui->slider_mtx_g_14;
    mixerCtrl.mtx_vol[13][7] = ui->slider_mtx_h_14;

    mixerCtrl.mtx_vol[14][0] = ui->slider_mtx_a_15;
    mixerCtrl.mtx_vol[14][1] = ui->slider_mtx_b_15;
    mixerCtrl.mtx_vol[14][2] = ui->slider_mtx_c_15;
    mixerCtrl.mtx_vol[14][3] = ui->slider_mtx_d_15;
    mixerCtrl.mtx_vol[14][4] = ui->slider_mtx_e_15;
    mixerCtrl.mtx_vol[14][5] = ui->slider_mtx_f_15;
    mixerCtrl.mtx_vol[14][6] = ui->slider_mtx_g_15;
    mixerCtrl.mtx_vol[14][7] = ui->slider_mtx_h_15;

    mixerCtrl.mtx_vol[15][0] = ui->slider_mtx_a_16;
    mixerCtrl.mtx_vol[15][1] = ui->slider_mtx_b_16;
    mixerCtrl.mtx_vol[15][2] = ui->slider_mtx_c_16;
    mixerCtrl.mtx_vol[15][3] = ui->slider_mtx_d_16;
    mixerCtrl.mtx_vol[15][4] = ui->slider_mtx_e_16;
    mixerCtrl.mtx_vol[15][5] = ui->slider_mtx_f_16;
    mixerCtrl.mtx_vol[15][6] = ui->slider_mtx_g_16;
    mixerCtrl.mtx_vol[15][7] = ui->slider_mtx_h_16;

    mixerCtrl.mtx_vol[16][0] = ui->slider_mtx_a_17;
    mixerCtrl.mtx_vol[16][1] = ui->slider_mtx_b_17;
    mixerCtrl.mtx_vol[16][2] = ui->slider_mtx_c_17;
    mixerCtrl.mtx_vol[16][3] = ui->slider_mtx_d_17;
    mixerCtrl.mtx_vol[16][4] = ui->slider_mtx_e_17;
    mixerCtrl.mtx_vol[16][5] = ui->slider_mtx_f_17;
    mixerCtrl.mtx_vol[16][6] = ui->slider_mtx_g_17;
    mixerCtrl.mtx_vol[16][7] = ui->slider_mtx_h_17;

    mixerCtrl.mtx_vol[17][0] = ui->slider_mtx_a_18;
    mixerCtrl.mtx_vol[17][1] = ui->slider_mtx_b_18;
    mixerCtrl.mtx_vol[17][2] = ui->slider_mtx_c_18;
    mixerCtrl.mtx_vol[17][3] = ui->slider_mtx_d_18;
    mixerCtrl.mtx_vol[17][4] = ui->slider_mtx_e_18;
    mixerCtrl.mtx_vol[17][5] = ui->slider_mtx_f_18;
    mixerCtrl.mtx_vol[17][6] = ui->slider_mtx_g_18;
    mixerCtrl.mtx_vol[17][7] = ui->slider_mtx_h_18;

    mixerCtrl.mtx_clear[0] = ui->matrix01BtnClear;
    mixerCtrl.mtx_clear[1] = ui->matrix02BtnClear;
    mixerCtrl.mtx_clear[2] = ui->matrix03BtnClear;
    mixerCtrl.mtx_clear[3] = ui->matrix04BtnClear;
    mixerCtrl.mtx_clear[4] = ui->matrix05BtnClear;
    mixerCtrl.mtx_clear[5] = ui->matrix06BtnClear;
    mixerCtrl.mtx_clear[6] = ui->matrix07BtnClear;
    mixerCtrl.mtx_clear[7] = ui->matrix08BtnClear;
    mixerCtrl.mtx_clear[8] = ui->matrix09BtnClear;
    mixerCtrl.mtx_clear[9] = ui->matrix10BtnClear;
    mixerCtrl.mtx_clear[10] = ui->matrix11BtnClear;
    mixerCtrl.mtx_clear[11] = ui->matrix12BtnClear;
    mixerCtrl.mtx_clear[12] = ui->matrix13BtnClear;
    mixerCtrl.mtx_clear[13] = ui->matrix14BtnClear;
    mixerCtrl.mtx_clear[14] = ui->matrix15BtnClear;
    mixerCtrl.mtx_clear[15] = ui->matrix16BtnClear;
    mixerCtrl.mtx_clear[16] = ui->matrix17BtnClear;
    mixerCtrl.mtx_clear[17] = ui->matrix18BtnClear;

    for(int i=0;i<18;++i){
        mixerCtrl.mtx_clear[i]->setText(tr("Clear"));
    }

    // now invoke MixSis(), which handles internal alsa stuff
    mixer = new MixSis(&mixerCtrl, alsaDeviceName, this);

    // ChangeWatcher handles alsa callbacks from another thread in case another program changes the values
    // This works fine for every other alsa controller I have tested. However, if there are two instances of qsismix open,
    // ChangeWatcher goes crazy. Implemented workaround is to use a lock file so only one instance can run at a time.
    changeWatcher = new ChangeWatcher(mixer->ctl, this);
    QObject::connect(changeWatcher, &ChangeWatcher::changeVal, this, &MainWindow::setVal);
    QObject::connect(this, &MainWindow::maskVol, changeWatcher, &ChangeWatcher::setMask);
    changeWatcher->start();

    createMenu();
}

MainWindow::~MainWindow()
{
    delete fileMenu;
    delete saveAct;
    delete loadAct;
    delete exitAct;
    delete editMenu;
    delete clearMtxAct;
    if(changeWatcher){
        changeWatcher->terminate();
    }
    delete mixer;
    delete ui;
}

bool MainWindow::event(QEvent *ev){
    if(ev->type() == QEvent::Quit){
        QApplication::quit();
        return false;
    }
    return QWidget::event(ev);
}

// for flagging load/saves from the command line
int MainWindow::loadFrom(QString filen){
    return mixerCtrl.load_from(filen);
}

int MainWindow::saveTo(QString filen){
    return mixerCtrl.save_to(filen);
}


void MainWindow::createMenu(){
    saveAct = new QAction(tr("&Save"), this);
    saveAct->setShortcuts(QKeySequence::Save);
    connect(saveAct, &QAction::triggered, this, [=](){
       QString directory = QStandardPaths::writableLocation(QStandardPaths::ConfigLocation);
       QString filen = QFileDialog::getSaveFileName(this, tr("Save Configuration As..."), directory.append(tr("/qsismix.6i6")), tr("Sixisix Configs (*.6i6)"));
       mixerCtrl.save_to(filen);
    });

    loadAct = new QAction(tr("&Load"), this);
    loadAct->setShortcuts(QKeySequence::Open);
    connect(loadAct, &QAction::triggered, this, [=](){
        QString directory = QStandardPaths::writableLocation(QStandardPaths::ConfigLocation);
        QString filen = QFileDialog::getOpenFileName(this, tr("Load Configuration From..."), directory.append("/qsismix.6i6"), tr("Sixisix Configs (*.6i6)"));
        mixerCtrl.load_from(filen);
    });
    exitAct = new QAction(tr("&Exit"), this);
    exitAct->setShortcuts(QKeySequence::Quit);
    connect(exitAct, &QAction::triggered, this, [=](){
        QApplication::quit();
    });
    fileMenu = menuBar()->addMenu(tr("&File"));
    fileMenu->addAction(saveAct);
    fileMenu->addAction(loadAct);
    fileMenu->addAction(exitAct);

    // clearMtxAct clears all matrices
    clearMtxAct = new QAction(tr("Clear All &Matrices"), this);
    connect(clearMtxAct, &QAction::triggered, this, [=](){
        // first ask, because this erases information
        if( QMessageBox::warning(this, tr("Are you sure?"),
                                 tr("This will erase all the matrix routing information.\n"
                                    "Enter 'yes' to confirm."),
                                 QMessageBox::No | QMessageBox::Yes,
                                 QMessageBox::No)
             == QMessageBox::No) return;
        // iterate through the matrix inputs, turning them off, along with muting their volume controls
        int i = mixerCtrl.get_numid[MATRIX_ROUTE_1];
        while(i <= mixerCtrl.get_numid[MATRIX_ROUTE_18]){
           int j = i + 9;
           while(i < j){
               mixer->set(i,0);
               i += 1;
           }
       }
    });
    bounceMtxAct = new QAction(tr("&Bounce Matrices to RAM"), this);
    connect(bounceMtxAct, &QAction::triggered, this, [=](){
       // here just bounce all the data from each matrix to RAM
        for(int i=0; i<18; ++i){
            for(int j=0; j<8; ++j){
                mtxRAM[i][j] = mixerCtrl.mtx_vol[i][j]->value();
            }
            mtxRAM[i][8] = mixerCtrl.mtx_src[i]->currentIndex();
        }
        restoreMtxAct->setEnabled(true);
    });
    restoreMtxAct = new QAction(tr("&Restore Matrices from RAM"), this);
    connect(restoreMtxAct, &QAction::triggered, this, [=](){
        // this is inverse of the bounce action
        int n = 0, m = 0;
        int i = mixerCtrl.get_numid[MATRIX_ROUTE_1];
        while(i <= mixerCtrl.get_numid[MATRIX_ROUTE_18]){
            m = 0;

            mixer->set(i, mtxRAM[n][8]);

            int j = i + 9;
            i = i + 1;
            while(i < j){
                mixer->set(i, mixer->volume_from_dB(mtxRAM[n][m++], i, mixer->ctl));
                i = i + 1;
            }
            ++n;
        }
    });
    restoreMtxAct->setEnabled(false);
    editMenu = menuBar()->addMenu(tr("&Edit"));
    editMenu->addAction(clearMtxAct);
    editMenu->addAction(restoreMtxAct);
    editMenu->addAction(bounceMtxAct);
}

void MainWindow::setVal(int alsa_id, int value, int idx){
    mixerCtrl.set(alsa_id, value, idx);
}

void MainWindow::setChangeWatcherMask(int n, int mask){
    emit maskVol(n, mask);
}
